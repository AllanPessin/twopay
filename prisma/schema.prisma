// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../../node_modules/.prisma/client"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model User {
    id       Int    @id @default(autoincrement())
    email    String @unique
    password String
    name     String
    role     Role   @default(GUEST)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    expenses    Expense[]
    expenseUser ExpenseUser[]

    @@map("user")
}

enum Role {
    GUEST
    ADMIN
}

model Expense {
    id           Int      @id @default(autoincrement())
    description  String
    value        Float
    date         DateTime @default(now())
    observations String?
    recurrence   Int
    paid         Boolean  @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    categoryId Int?
    category   Category? @relation(fields: [categoryId], references: [id])

    userId Int
    user   User @relation(fields: [userId], references: [id])

    expenseUser ExpenseUser[]

    @@map("expense")
}

model Category {
    id   Int    @id @default(autoincrement())
    name String @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    expenses Expense[]

    @@map("category")
}

model ExpenseUser {
    id         Int   @id @default(autoincrement())
    percentage Float

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt

    userId Int
    user   User @relation(fields: [userId], references: [id])

    expenseId Int
    expense   Expense @relation(fields: [expenseId], references: [id])

    @@unique([userId, expenseId])
    @@map("expense_user")
}
